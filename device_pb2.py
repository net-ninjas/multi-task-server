# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mes.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='mes.proto',
  package='netninja.device',
  syntax='proto2',
  serialized_pb=_b('\n\tmes.proto\x12\x0fnetninja.device\"\xe1\x01\n\x08register\x12\x12\n\nsellerCode\x18\x01 \x02(\t\x12\n\n\x02id\x18\x02 \x02(\x04\x12:\n\x0c\x63\x61pabilities\x18\x03 \x03(\x0b\x32$.netninja.device.register.Capability\x1aU\n\nCapability\x12\x36\n\x04type\x18\x01 \x02(\x0e\x32(.netninja.device.register.CapabilityType\x12\x0f\n\x07options\x18\x02 \x03(\t\"\"\n\x0e\x43\x61pabilityType\x12\x10\n\x0cURL_RETRIEVE\x10\x00\"\x86\x02\n\x04task\x12\n\n\x02id\x18\x01 \x02(\x04\x12/\n\x08subtasks\x18\x02 \x03(\x0b\x32\x1d.netninja.device.task.subtask\x1a+\n\ntaskOption\x12\r\n\x05\x66lags\x18\x01 \x02(\x04\x12\x0e\n\x06\x65xtras\x18\x02 \x03(\t\x1av\n\x07subtask\x12\n\n\x02id\x18\x01 \x02(\x04\x12,\n\x04type\x18\x02 \x02(\x0e\x32\x1e.netninja.device.task.TaskType\x12\x31\n\x07options\x18\x03 \x03(\x0b\x32 .netninja.device.task.taskOption\"\x1c\n\x08TaskType\x12\x10\n\x0cURL_RETRIEVE\x10\x00\"\x90\x01\n\x06result\x12\n\n\x02id\x18\x01 \x02(\x04\x12=\n\x0esubtaskResults\x18\x02 \x03(\x0b\x32%.netninja.device.result.subtaskResult\x1a;\n\rsubtaskResult\x12\n\n\x02id\x18\x01 \x02(\x04\x12\x0e\n\x06\x61nswer\x18\x02 \x03(\t\x12\x0e\n\x06\x65xtras\x18\x03 \x03(\t')
)



_REGISTER_CAPABILITYTYPE = _descriptor.EnumDescriptor(
  name='CapabilityType',
  full_name='netninja.device.register.CapabilityType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='URL_RETRIEVE', index=0, number=0,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=222,
  serialized_end=256,
)
_sym_db.RegisterEnumDescriptor(_REGISTER_CAPABILITYTYPE)

_TASK_TASKTYPE = _descriptor.EnumDescriptor(
  name='TaskType',
  full_name='netninja.device.task.TaskType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='URL_RETRIEVE', index=0, number=0,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=493,
  serialized_end=521,
)
_sym_db.RegisterEnumDescriptor(_TASK_TASKTYPE)


_REGISTER_CAPABILITY = _descriptor.Descriptor(
  name='Capability',
  full_name='netninja.device.register.Capability',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='netninja.device.register.Capability.type', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='options', full_name='netninja.device.register.Capability.options', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=135,
  serialized_end=220,
)

_REGISTER = _descriptor.Descriptor(
  name='register',
  full_name='netninja.device.register',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sellerCode', full_name='netninja.device.register.sellerCode', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='id', full_name='netninja.device.register.id', index=1,
      number=2, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='capabilities', full_name='netninja.device.register.capabilities', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_REGISTER_CAPABILITY, ],
  enum_types=[
    _REGISTER_CAPABILITYTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=31,
  serialized_end=256,
)


_TASK_TASKOPTION = _descriptor.Descriptor(
  name='taskOption',
  full_name='netninja.device.task.taskOption',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='flags', full_name='netninja.device.task.taskOption.flags', index=0,
      number=1, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='extras', full_name='netninja.device.task.taskOption.extras', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=328,
  serialized_end=371,
)

_TASK_SUBTASK = _descriptor.Descriptor(
  name='subtask',
  full_name='netninja.device.task.subtask',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='netninja.device.task.subtask.id', index=0,
      number=1, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='type', full_name='netninja.device.task.subtask.type', index=1,
      number=2, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='options', full_name='netninja.device.task.subtask.options', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=373,
  serialized_end=491,
)

_TASK = _descriptor.Descriptor(
  name='task',
  full_name='netninja.device.task',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='netninja.device.task.id', index=0,
      number=1, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='subtasks', full_name='netninja.device.task.subtasks', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_TASK_TASKOPTION, _TASK_SUBTASK, ],
  enum_types=[
    _TASK_TASKTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=259,
  serialized_end=521,
)


_RESULT_SUBTASKRESULT = _descriptor.Descriptor(
  name='subtaskResult',
  full_name='netninja.device.result.subtaskResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='netninja.device.result.subtaskResult.id', index=0,
      number=1, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='answer', full_name='netninja.device.result.subtaskResult.answer', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='extras', full_name='netninja.device.result.subtaskResult.extras', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=609,
  serialized_end=668,
)

_RESULT = _descriptor.Descriptor(
  name='result',
  full_name='netninja.device.result',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='netninja.device.result.id', index=0,
      number=1, type=4, cpp_type=4, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='subtaskResults', full_name='netninja.device.result.subtaskResults', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_RESULT_SUBTASKRESULT, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=524,
  serialized_end=668,
)

_REGISTER_CAPABILITY.fields_by_name['type'].enum_type = _REGISTER_CAPABILITYTYPE
_REGISTER_CAPABILITY.containing_type = _REGISTER
_REGISTER.fields_by_name['capabilities'].message_type = _REGISTER_CAPABILITY
_REGISTER_CAPABILITYTYPE.containing_type = _REGISTER
_TASK_TASKOPTION.containing_type = _TASK
_TASK_SUBTASK.fields_by_name['type'].enum_type = _TASK_TASKTYPE
_TASK_SUBTASK.fields_by_name['options'].message_type = _TASK_TASKOPTION
_TASK_SUBTASK.containing_type = _TASK
_TASK.fields_by_name['subtasks'].message_type = _TASK_SUBTASK
_TASK_TASKTYPE.containing_type = _TASK
_RESULT_SUBTASKRESULT.containing_type = _RESULT
_RESULT.fields_by_name['subtaskResults'].message_type = _RESULT_SUBTASKRESULT
DESCRIPTOR.message_types_by_name['register'] = _REGISTER
DESCRIPTOR.message_types_by_name['task'] = _TASK
DESCRIPTOR.message_types_by_name['result'] = _RESULT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

register = _reflection.GeneratedProtocolMessageType('register', (_message.Message,), dict(

  Capability = _reflection.GeneratedProtocolMessageType('Capability', (_message.Message,), dict(
    DESCRIPTOR = _REGISTER_CAPABILITY,
    __module__ = 'mes_pb2'
    # @@protoc_insertion_point(class_scope:netninja.device.register.Capability)
    ))
  ,
  DESCRIPTOR = _REGISTER,
  __module__ = 'mes_pb2'
  # @@protoc_insertion_point(class_scope:netninja.device.register)
  ))
_sym_db.RegisterMessage(register)
_sym_db.RegisterMessage(register.Capability)

task = _reflection.GeneratedProtocolMessageType('task', (_message.Message,), dict(

  taskOption = _reflection.GeneratedProtocolMessageType('taskOption', (_message.Message,), dict(
    DESCRIPTOR = _TASK_TASKOPTION,
    __module__ = 'mes_pb2'
    # @@protoc_insertion_point(class_scope:netninja.device.task.taskOption)
    ))
  ,

  subtask = _reflection.GeneratedProtocolMessageType('subtask', (_message.Message,), dict(
    DESCRIPTOR = _TASK_SUBTASK,
    __module__ = 'mes_pb2'
    # @@protoc_insertion_point(class_scope:netninja.device.task.subtask)
    ))
  ,
  DESCRIPTOR = _TASK,
  __module__ = 'mes_pb2'
  # @@protoc_insertion_point(class_scope:netninja.device.task)
  ))
_sym_db.RegisterMessage(task)
_sym_db.RegisterMessage(task.taskOption)
_sym_db.RegisterMessage(task.subtask)

result = _reflection.GeneratedProtocolMessageType('result', (_message.Message,), dict(

  subtaskResult = _reflection.GeneratedProtocolMessageType('subtaskResult', (_message.Message,), dict(
    DESCRIPTOR = _RESULT_SUBTASKRESULT,
    __module__ = 'mes_pb2'
    # @@protoc_insertion_point(class_scope:netninja.device.result.subtaskResult)
    ))
  ,
  DESCRIPTOR = _RESULT,
  __module__ = 'mes_pb2'
  # @@protoc_insertion_point(class_scope:netninja.device.result)
  ))
_sym_db.RegisterMessage(result)
_sym_db.RegisterMessage(result.subtaskResult)


# @@protoc_insertion_point(module_scope)
